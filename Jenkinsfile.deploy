pipeline {
    agent any

    environment {
        // Definiamo le variabili per rendere il codice più leggibile
        HELM_CHART_PATH = 'charts/flask-app-chart'
        K8S_NAMESPACE = 'formazione-sou'
        RELEASE_NAME = 'flask-app-example'
    }

    stages {
        stage('Check and Create Namespace') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig-formazione-sou', variable: 'KUBECONFIG_FILE')]) {
                        def namespaceExists = sh(
                            script: "kubectl get namespace " + K8S_NAMESPACE + " -o name --kubeconfig " + KUBECONFIG_FILE + " 2>/dev/null || true",
                            returnStdout: true
                        ).trim()
                        
                        if (namespaceExists) {
                            echo "Namespace '${K8S_NAMESPACE}' already exists. Skipping creation."
                        } else {
                            echo "Namespace '${K8S_NAMESPACE}' does not exist. Creating it now."
                            sh "kubectl create namespace " + K8S_NAMESPACE + " --kubeconfig " + KUBECONFIG_FILE
                        }
                    }
                }
            }
        }

        stage('Checkout Code') {
            steps {
                // Clona la repository che contiene il tuo Helm Chart
                git url: 'https://github.com/Niccolo-Alfredo/formazione_sou_k8s.git', branch: 'main'
            }
        }

        stage('Install Helm Chart') {
            steps {
                script {
                    // Utilizza il chart per installare/aggiornare l'applicazione
                    // Usiamo la stessa credenziale per Helm
                    withCredentials([file(credentialsId: 'kubeconfig-formazione-sou', variable: 'KUBECONFIG_FILE')]) {
                        // Il comando --set image.tag=latest specifica l'ultimo tag
                        sh "helm upgrade --install " + RELEASE_NAME + " " + HELM_CHART_PATH + " --namespace " + K8S_NAMESPACE + " --kubeconfig " + KUBECONFIG_FILE + " --set image.tag=latest"
                    }
                }
            }
        }

        stage('Check Deployment Best Practices') {
            steps {
                script {
                    echo "Running best practices check script..."
                    withCredentials([file(credentialsId: 'kubeconfig-formazione-sou', variable: 'KUBECONFIG_FILE')]) {
                        // Esegue lo script che abbiamo creato
                        // Se lo script fallisce (esce con un codice diverso da 0), questo stage fallirà
                        sh './check_deployment.sh'
                    }
                }
            }
        }
    }
}